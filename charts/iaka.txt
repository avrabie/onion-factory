# Instructions for Setting Up Ingress-Nginx with Let's Encrypt on AKS

This guide provides step-by-step instructions for installing and configuring ingress-nginx with Let's Encrypt SSL certificates on your AKS cluster for the demo-local-ai application.

## Prerequisites
- An AKS cluster
- kubectl configured to communicate with your AKS cluster
- Helm 3 installed

## Step 1: Prepare Your Environment

```bash
# Ensure you have kubectl configured for your AKS cluster
kubectl cluster-info

# Create a namespace for your application (if not already created)
kubectl create namespace demo-local-ai
```

Note: The ingress-nginx controller will be installed as part of the tls-aks Helm chart in Step 2. Make sure to set up your DNS zone with the external IP after installation.

## Step 2: Install TLS-AKS Helm Chart (includes Cert-Manager and Ingress Configuration)

```bash
# Add the required Helm repositories
helm repo add jetstack https://charts.jetstack.io
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update




# Verify the ClusterIssuer is ready
kubectl get clusterissuer -o wide
```

Note: The tls-aks chart automatically installs cert-manager with the following configuration:
- Version: v1.18.2
- CRDs enabled
- Startup API check disabled
- Creates the necessary ClusterIssuer for Let's Encrypt

## Step 3: Deploy the Demo-Local-AI Application with Helm

# Add the ownership metadata Helm expects
kubectl label namespace demo-local-ai app.kubernetes.io/managed-by=Helm --overwrite
kubectl annotate namespace demo-local-ai meta.helm.sh/release-name=demo-local-ai --overwrite
kubectl annotate namespace demo-local-ai meta.helm.sh/release-namespace=demo-local-ai --overwrite

# Then install
helm upgrade --install demo-local-ai ./charts/demo-local-ai \
  -f ./charts/demo-local-ai/values-aks-dev.yaml \
  --namespace demo-local-ai \
  --create-namespace

```bash
# Install or upgrade the demo-local-ai application with the AKS values
helm upgrade --install demo-local-ai ./charts/demo-local-ai \
    -f ./charts/demo-local-ai/values-aks-dev.yaml \
    --namespace demo-local-ai \
    --create-namespace
```

## Step 4: Verify Ingress and Certificate Status

```bash
# Verify the ingress is created
kubectl get ingress -n demo-local-ai

# Check the status of the certificate
kubectl get certificate -n demo-local-ai

# Check certificate events
kubectl describe certificate -n demo-local-ai
```

Note: The ingress configuration with TLS is automatically created by the tls-aks chart based on the values provided.

## Step 5: Verify the Setup

```bash
# Get the external IP of the ingress controller
kubectl get service -n tls-system ingress-nginx-controller

# Check if the certificate is issued
kubectl get certificate -n demo-local-ai

# Test the HTTPS connection (replace with your domain)
curl -k https://execodex.com
```

## Troubleshooting

If you encounter issues with cert-manager:

1. Check the cert-manager logs:
   ```bash
   kubectl logs -n tls-system -l app=cert-manager
   ```

2. Check the certificate status:
   ```bash
   kubectl describe certificate -n demo-local-ai
   ```

3. Check the challenge status:
   ```bash
   kubectl get challenges -n demo-local-ai
   ```

4. If you need to reinstall the tls-aks chart, follow the cleanup instructions:
   ```bash
   helm uninstall tls-aks -n tls-system
   kubectl delete namespace tls-system
   ```

## Notes

- The domain "execodex.com" is configured in the tls-aks/values.yaml file. Update it if you're using a different domain.
- Make sure your domain's DNS is properly configured to point to the external IP of your ingress controller.
- Let's Encrypt has rate limits. Use the staging server for testing by changing the server URL in tls-aks/values.yaml (clusterIssuer.server).